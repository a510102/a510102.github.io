{"version":3,"sources":["components/Searchbox/Searchbox.js","components/FocusCity.js","components/AqiContent.js","containers/App.js","serviceWorker.js","index.js"],"names":["Searchbox","CountyList","onchangeCountyAqi","countyarray","map","county","i","key","value","className","onChange","defaultValue","FocusCity","filterCity","color","AQI","SiteName","O3","CO","SO2","NO","AqiContent","onChangeFocusSite","County","datas","PublishTime","data","onClick","App","props","e","target","setState","firstdata","state","find","focusSite","textContent","fetch","then","response","json","singleCounty","filter","element","index","arr","indexOf","catch","error","console","log","this","filterdatas","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uTA8CeA,G,MA3CG,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,kBACzBC,EAAcF,EAAWG,KAAI,SAACC,EAAQC,GAC1C,OAAO,4BAAQC,IAAKD,EAAGE,MAAOH,GAASA,MAEzC,OACE,yBAAKI,UAAU,yBACb,yBAAKA,UAAU,kBACb,yEACA,4BAAQC,SAAUR,GAChB,4BAAQS,cAAY,GAApB,kCACER,IAGN,wBAAIM,UAAU,0BACZ,4BACE,uBAAGA,UAAU,kBAAb,QACA,4CAEF,4BACE,uBAAGA,UAAU,mBAAb,UACA,4CAEF,4BACE,uBAAGA,UAAU,mBAAb,WACA,4DAAQ,6BAAR,uBAEF,4BACE,uBAAGA,UAAU,gBAAb,WACA,4DAAQ,6BAAR,uBAEF,4BACE,uBAAGA,UAAU,mBAAb,WACA,4DAAQ,6BAAR,uBAEF,4BACE,uBAAGA,UAAU,gBAAb,WACA,gDCwBKG,G,MA5DG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,WACbC,EAAQ,GACRC,EAAMF,EAAWE,IACrB,QAAO,GACL,KAAKA,GAAO,GAAKA,GAAO,GACpBD,EAAQ,iBACV,MACF,KAAKC,GAAO,IAAMA,GAAO,IACrBD,EAAQ,kBACV,MACF,KAAKC,GAAO,KAAOA,GAAO,IACtBD,EAAQ,kBACV,MACF,KAAKC,GAAO,KAAOA,GAAO,IACtBD,EAAQ,eACV,MACF,KAAKC,GAAO,KAAOA,GAAO,IACtBD,EAAQ,kBACV,MACF,KAAKC,GAAM,KAAOA,GAAM,IACpBD,EAAQ,eAIhB,OACE,6BACE,wBAAIL,UAAU,sBACV,wBAAIA,UAAU,WACZ,2BAAKI,EAAWG,UAChB,uBAAGP,UAAaK,GAASD,EAAWE,MAEtC,wBAAIN,UAAU,YACZ,2CAAM,kCAAO,kCAAP,UACN,2BAAKI,EAAWI,KAElB,wBAAIR,UAAU,YACZ,uDAAQ,mCAAQ,0BAAMA,UAAU,QAAhB,MAAR,QAA6C,kCAA7C,MACR,2BAAKI,EAAU,OAEjB,wBAAIJ,UAAU,YACZ,6DAAS,mCAAQ,0BAAMA,UAAU,QAAhB,OAAR,QAA8C,kCAA9C,MACT,2BAAKI,EAAW,WAElB,wBAAIJ,UAAU,YACZ,uDAAQ,0CACR,2BAAKI,EAAWK,KAElB,wBAAIT,UAAU,YACZ,uDAAQ,mCAAQ,kCAAR,UACR,2BAAKI,EAAWM,MAElB,wBAAIV,UAAU,YACZ,uDAAQ,mCAAQ,kCAAR,UACR,2BAAKI,EAAWO,SCCbC,G,MArDI,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,kBAAmBT,EAA6B,EAA7BA,WAAYU,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAC1D,OACE,6BACE,yBAAKf,UAAU,0BACb,4BAAMc,GACN,2BAAKV,EAAWY,YAAhB,kBAEF,yBAAKhB,UAAU,yBACb,kBAAC,EAAD,CAAYI,WAAaA,IACzB,yBAAKJ,UAAU,yBAEXe,EAAMpB,KAAI,SAACsB,EAAMpB,GACf,IAAIQ,EAAQ,GACRC,EAAMW,EAAKX,IACf,QAAO,GACL,KAAKA,GAAO,GAAKA,GAAO,GACpBD,EAAQ,iBACV,MACF,KAAKC,GAAO,IAAMA,GAAO,IACrBD,EAAQ,kBACV,MACF,KAAKC,GAAO,KAAOA,GAAO,IACtBD,EAAQ,kBACV,MACF,KAAKC,GAAO,KAAOA,GAAO,IACtBD,EAAQ,eACV,MACF,KAAKC,GAAO,KAAOA,GAAO,IACtBD,EAAQ,kBACV,MACF,KAAKC,GAAM,KAAOA,GAAM,IACpBD,EAAQ,eAGd,OACE,yBACEL,UAAU,mBACVF,IAAKD,GAEH,uBAAGqB,QAAUL,GACTI,EAAKV,UAET,uBAAGP,UAAWK,GAASY,EAAKX,cCkCjCa,G,wDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA8BR3B,kBAAoB,SAAC4B,GACnB,IAAIP,EAASO,EAAEC,OAAOvB,MACtB,GAAc,mCAAXe,EAAmB,CACpB,EAAKS,SAAS,CAAET,WAEhB,IAAIU,EAAY,EAAKC,MAAMV,MAAMW,MAAK,SAAAT,GAAI,OAAGA,EAAKH,SAAWA,KAC7D,EAAKS,SAAS,CAACI,UAAWH,EAAUjB,aArCrB,EAyCnBM,kBAAoB,SAACQ,GACnB,IAAIM,EAAYN,EAAEC,OAAOM,YACtBD,GACD,EAAKJ,SAAS,CAACI,eA1CjB,EAAKF,MAAQ,CACXV,MAAM,GACNvB,WAAY,GACZmC,UAAU,GACVb,OAAO,IANQ,E,gEASC,IAAD,OAEjBe,MADY,+EAETC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAf,GACJ,EAAKQ,SAAS,CAACR,UACf,IACMkB,EADQlB,EAAMpB,KAAI,SAAAsB,GAAI,OAAGA,EAAKH,UACPoB,QAAO,SAACC,EAASC,EAAOC,GACnD,OAAOA,EAAIC,QAAQH,KAAaC,KAElC,EAAKb,SAAS,CAAC/B,WAAYyC,IAC3B,IAAInB,EAASC,EAAM,GAAGD,OACtB,EAAKS,SAAS,CAACT,WACf,IAAIa,EAAYZ,EAAM,GAAGR,SACzB,EAAKgB,SAAS,CAACI,iBAEhBY,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAqBtB,IAAD,EACwCG,KAAKlB,MAA7CV,EADA,EACAA,MAAOD,EADP,EACOA,OAAQa,EADf,EACeA,UAAWnC,EAD1B,EAC0BA,WAE3BoD,EAAc7B,EAAMmB,QAAO,SAAAjB,GAAI,OAAIA,EAAKH,SAAWA,KACnDV,EAAaW,EAAMmB,QAAO,SAAAjB,GAAI,OAAIA,EAAKV,WAAaoB,KAC1D,OAA8B,IAAvBiB,EAAYC,QAAsC,IAAtBzC,EAAWyC,OAC5C,uCAEE,yBAAK7C,UAAU,QACb,kBAAC,EAAD,CACER,WAAYA,EACZC,kBAAmBkD,KAAKlD,oBAE1B,kBAAC,EAAD,CACEqB,OAAQA,EACRC,MAAO6B,EACPxC,WAAYA,EAAW,GACvBS,kBAAqB8B,KAAK9B,yB,GAlEpBiC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.8d3a580a.chunk.js","sourcesContent":["import React from 'react';\nimport './Searchbox.css';\n\nconst Searchbox = ({ CountyList, onchangeCountyAqi })=>{\n  const countyarray = CountyList.map((county, i)=>{\n    return <option key={i} value={county}>{county}</option>;\n  })\n  return (\n    <div className='flex tc aqi-searchbox'>\n      <div className='aqi-title flex'>\n        <h1>空氣品質指標(AQI)</h1>\n        <select onChange={onchangeCountyAqi}>\n          <option defaultValue>請選擇地區</option>\n          { countyarray }\n        </select>\n      </div>\n      <ul className='aqi-list flex bg-white'>\n        <li>\n          <p className='bg-light-green'>0~50</p>\n          <p>良好</p>\n        </li>\n        <li>\n          <p className='bg-light-yellow'>51~100</p>\n          <p>普通</p>\n        </li>\n        <li>\n          <p className='bg-light-orange'>101~150</p>\n          <p>對敏感族群<br />不健康</p>\n        </li>\n        <li>\n          <p className='bg-light-red'>151~200</p>\n          <p>對所有族群<br />不健康</p>\n        </li>\n        <li>\n          <p className='bg-light-purple'>201~300</p>\n          <p>對所有族群<br />不健康</p>\n        </li>\n        <li>\n          <p className='bg-dangerous'>301~400</p>\n          <p>危害</p>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Searchbox;","import React from 'react';\nimport './Focus.css';\n\nconst FocusCity = ({ filterCity })=> {\n    let color = '';\n    let AQI = filterCity.AQI;\n    switch(true){\n      case AQI >= 0 && AQI <= 50 :\n          color = 'bg-ligth-green';\n        break;\n      case AQI >= 51 && AQI <= 100 :\n          color = 'bg-light-yellow';\n        break;\n      case AQI >= 101 && AQI <= 150 :\n          color = 'bg-light-orange';\n        break;\n      case AQI >= 151 && AQI <= 200 :\n          color = 'bg-light-red';\n        break;\n      case AQI >= 201 && AQI <= 300 :\n          color = 'bg-light-purple';\n        break;\n      case AQI >=300 && AQI <=400 :\n          color = 'bg-dangerous';\n        break; \n    }\n\n  return (\n    <div>\n      <ul className=\"aqi-focus bg-white\">\n          <li className=\"aqi-box\">\n            <p>{ filterCity.SiteName }</p>\n            <p className = {color}>{ filterCity.AQI }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>臭氧 <span>O<sub>3</sub>(ppb)</span></p>\n            <p>{ filterCity.O3 }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>懸浮微粒 <span>PM<span className='half'>10</span>(ug/m<sup>3</sup>)</span></p>\n            <p>{ filterCity['PM10'] }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>細懸浮微粒 <span>PM<span className='half'>2.5</span>(ug/m<sup>3</sup>)</span></p>\n            <p>{ filterCity['PM2.5'] }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>一氧化碳 <span>CO(ppm)</span></p>\n            <p>{ filterCity.CO }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>二氧化硫 <span>SO<sub>2</sub>(ppb)</span></p>\n            <p>{ filterCity.SO2 }</p>\n          </li>\n          <li className='aqi-text'>\n            <p>二氧化氮 <span>NO<sub>2</sub>(ppb)</span></p>\n            <p>{ filterCity.NO }</p>\n          </li>\n        </ul>\n    </div>\n  )\n}\n\nexport default FocusCity;","import React from 'react';\nimport FocusCity from './FocusCity';\nimport './AqiContent.css'\n\nconst AqiContent = ({onChangeFocusSite, filterCity, County, datas})=>{\n  return (\n    <div>\n      <div className=\"aqi-content-title flex\">\n        <h2>{ County }</h2>\n        <p>{ filterCity.PublishTime } 更新</p>\n      </div>\n      <div className=\"aqi-content-main flex\">\n        <FocusCity  filterCity= {filterCity} />\n        <div className='aqi-content-list flex'>\n          { \n            datas.map((data, i)=>{\n              let color = '';\n              let AQI = data.AQI;\n              switch(true){\n                case AQI >= 0 && AQI <= 50 :\n                    color = 'bg-ligth-green';\n                  break;\n                case AQI >= 51 && AQI <= 100 :\n                    color = 'bg-light-yellow';\n                  break;\n                case AQI >= 101 && AQI <= 150 :\n                    color = 'bg-light-orange';\n                  break;\n                case AQI >= 151 && AQI <= 200 :\n                    color = 'bg-light-red';\n                  break;\n                case AQI >= 201 && AQI <= 300 :\n                    color = 'bg-light-purple';\n                  break;\n                case AQI >=300 && AQI <=400 :\n                    color = 'bg-dangerous';\n                  break; \n              }\n              return (\n                <div \n                  className=\"aqi-box bg-white\"\n                  key={i}\n                  >\n                    <p onClick={ onChangeFocusSite } >\n                      { data.SiteName }\n                    </p>\n                    <p className={color}>{ data.AQI }</p>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AqiContent;","import React, { Component } from 'react';\nimport Searchbox from '../components/Searchbox/Searchbox';\nimport AqiContent from '../components/AqiContent';\nimport './App.css'\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datas:[],\n      CountyList: [],\n      focusSite:'',\n      County:'',\n    };\n  }\n  componentDidMount(){\n    const url = 'https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&%24top=1000&%24format=json';\n    fetch(url)\n      .then(response => {\n        return response.json();\n      })\n      .then(datas=> {\n        this.setState({datas});\n        let countys = datas.map(data=> data.County);\n        const singleCounty = countys.filter((element, index, arr) => {\n          return arr.indexOf(element) === index;\n        })\n        this.setState({CountyList: singleCounty});\n        let County = datas[0].County;\n        this.setState({County});\n        let focusSite = datas[0].SiteName;\n        this.setState({focusSite});\n      })\n      .catch(error => console.log(error))\n      \n  }\n\n  onchangeCountyAqi = (e) => {   //select事件\n    let County = e.target.value;\n    if(County !== '請選擇地區'){\n      this.setState({ County }); \n      //找出選取的城市第一個地區 然後選取為關注地區\n      let firstdata = this.state.datas.find(data=> data.County === County );\n      this.setState({focusSite: firstdata.SiteName});\n    }\n  } \n\n  onChangeFocusSite = (e)=>{   //click事件\n    let focusSite = e.target.textContent;\n    if(focusSite){\n      this.setState({focusSite});\n    }\n  }\n\n  render() {\n    const {datas, County, focusSite, CountyList} = this.state;  \n\n    const filterdatas = datas.filter(data => data.County === County);//篩選相同城市的資料\n    const filterCity = datas.filter(data => data.SiteName === focusSite); //選取點選的地區資料 \n    return filterdatas.length === 0 || filterCity.length === 0 ?\n      <h1>Loading</h1> :\n      (\n        <div className='wrap'>\n          <Searchbox \n            CountyList={CountyList}\n            onchangeCountyAqi={this.onchangeCountyAqi} \n          />\n          <AqiContent \n            County={County} \n            datas={filterdatas} \n            filterCity={filterCity[0]}\n            onChangeFocusSite = {this.onChangeFocusSite}\n            />\n        </div>\n      )\n  }  \n}\n\nexport default App ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}